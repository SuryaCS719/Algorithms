#Dijkstra's algorithm

import time
import numpy as np

def neighbours(amat,n):
	l=amat[n]
	k=[]
	for i in range(len(l)):
		if amat[n][i]==1:
			k=k+[i]
	return k

def adjmatrix(a):
	m,n=a.shape
	b=np.zeros((m,n))
	for i in range(m):
		for j in range(n):
			if a[i][j]>0:
				b[i][j]=1
	return b

def dijkstra(amat):
	amat=np.array(amat)
	m,n=amat.shape
	inf=np.amax(amat)
	maxi=inf*len(amat)+1
	distance={}
	for i in range(m):
		distance[i]=maxi
	bmat=adjmatrix(amat)
	distance[0]=0
	l=[]
	for i in range(m):
		l=l+[i]
	while len(l)!=0:
		i=l[0]
		for j in neighbours(bmat,i):
			if distance[i]+amat[i][j]<distance[j]:
				distance[j]=distance[i]+amat[i][j]
				l=l+[j]
		l=l[1:]
	return distance

a=[[0,10,5,0,0],[0,0,0,1,0],[0,3,0,9,2],[0,0,0,0,0],[2,0,0,6,0]]
start=time.time()
print(dijkstra(a))
time.sleep(0)
end=time.time()
print(end-start)
